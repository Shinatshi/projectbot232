import sqlite3
import os
from gpt4all import GPT4All
from create import create_or_update_db
from translate import translate_to_rus

DB_NAME = 'career_bot.db'
MODEL_NAME = "orca-mini-3b-gguf2-q4_0"
DETAIL_COMMANDS = ["–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", "—Ä–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ", "more"]
def get_db_connection():
    conn = sqlite3.connect(DB_NAME)
    conn.row_factory = sqlite3.Row
    return conn

def find_professions(user_query, shown_ids):
    STOP_WORDS = {"–º–Ω–µ", "–Ω—Ä–∞–≤–∏—Ç—Å—è", "–∏", "–∞", "–Ω–æ", "—á—Ç–æ", "–∫–æ–≥–¥–∞", "—Ö–æ—á—É", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"}

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM professions")
    rows = cursor.fetchall()
    conn.close()

    words = [
        w.strip(".,!?()").lower()
        for w in user_query.split()
        if w.lower() not in STOP_WORDS
    ]
    if not words:
        return []

    synonym_map = {
        "–∫–æ–¥": ["–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"],
        "–∂–∏–≤–æ—Ç–Ω—ã–µ": ["–±–∏–æ–ª–æ–≥–∏—è", "–ø—Ä–∏—Ä–æ–¥–∞", "–∏—Å–ª–µ–¥–æ–≤–∞–Ω–Ω–∏–µ"],
        "–ø–∏—Å–∞—Ç—å": ["–ø–∏—Å–∞—Ç—å", "—Ç–µ–∫—Å—Ç—ã", "–∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥"],
        "–ª—é–¥–∏": ["–æ–±—â–µ–Ω–∏–µ", "–∫–æ–º–∞–Ω–¥–∞", "–ø–µ—Ä—Å–æ–Ω–∞–ª"],
        "–∞–Ω–∞–ª–∏–∑": ["–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "–¥–∞–Ω–Ω—ã–µ", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"],
        "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ": ["–¥–∏–∑–∞–π–Ω", "–∫—Ä–µ–∞—Ç–∏–≤", "—Å–æ–∑–¥–∞–Ω–∏–µ"],
    }
    expanded_words = set(words)
    for w in words:
        if w in synonym_map:
            expanded_words.update(synonym_map[w])


    scored = []
    for row in rows:
        text = " ".join([
            row["name"], row["category"], row["description"],
            row["skills"], row["keywords"]
        ]).lower()

        score = sum(1 for w in expanded_words if w in text)
        if score >= 2 and row["id"] not in shown_ids:
            scored.append((score, row))

    scored.sort(reverse=True, key=lambda x: x[0])
    return [r for _, r in scored]


try:
    model = GPT4All(model_name=MODEL_NAME)
except Exception as e:
    print("–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å:", e)
    model = None

def get_ai_detail(profession_name):
    if model:
        with model.chat_session():
            ai_text = model.generate(
                f"You are a career consultant. Describe the profession '{profession_name}' in detail. "
                f"Explain what this person does, their main responsibilities, required skills, "
                f"and what type of person this career suits. Keep it clear and friendly.",
                max_tokens=250
            )
        return ai_text
    else:
        return get_profession_detail(profession_name)

def get_ai_response(user_input, shown_ids):
    found = find_professions(user_input, shown_ids)
    if not found:
        if model:
            with model.chat_session():
                ai_text = model.generate(
    f"You are a career consultant. Your task is to help people choose a profession based on their interests. "
    f"Interests: {user_input}. "
    f"Suggest a few suitable professions or career paths and explain why they might fit. "
    f"Do not repeat the request or ask questions.",
    max_tokens=250
)
            translated = translate_to_rus(ai_text)
            return translated, shown_ids, None
        else:
            return "–ù–∏—á–µ–≥–æ –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏", shown_ids, None

    prof = found[0]
    shown_ids.append(prof["id"])
    last_suggested = prof["name"]

    if model:
        with model.chat_session():
            ai_text = model.generate(
    f"You are a career consultant. Your task is to help people choose a profession based on their interests. "
    f"User interests: {user_input}. "
    f"Give 2‚Äì3 possible professions or career paths that logically combine these interests. "
    f"Explain briefly why each might fit. "
    f"Do not ask any questions, do not ask for clarification, and do not request more details. "
    f"If the combination is unusual, make creative suggestions instead of asking.",
    max_tokens=300
)
        translated = translate_to_rus(ai_text)
        return translated, shown_ids, last_suggested
    else:
        card = (
            f"–Ø –¥—É–º–∞—é, —Ç–µ–±–µ –º–æ–∂–µ—Ç –ø–æ–¥–æ–π—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è: {prof['name']} "
            f"(–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {prof['category']}).\n"
            f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏."
        )
        return card, shown_ids, last_suggested

def get_profession_detail(name):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM professions WHERE name=?", (name,))
    prof = cursor.fetchone()
    conn.close()
    if not prof:
        return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    skills_list = prof["skills"].split(", ")
    detail = (
        f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {prof['name']}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {prof['category']}\n"
        f"–¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏: {prof['personality_type']}\n"
        f"–ù–∞–≤—ã–∫–∏: {', '.join(skills_list)}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {prof['description']}"
    )
    return detail


def console_interface():
    shown_ids = []
    last_suggested = None
    print("ü§ñ –ö–∞—Ä—å–µ—Ä–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –∏–ª–∏ –∫–∞–∫–∏–µ —É —Ç–µ–±—è –Ω–∞–≤—ã–∫–∏. ('–≤—ã—Ö–æ–¥'=–æ—Å—Ç–∞–Ω–æ–≤–∫–∞)")
    print("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ = –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

    while True:
        user_input = input("\n–í–∞—à –∑–∞–ø—Ä–æ—Å: ").strip().lower()

        if user_input in ("–≤—ã—Ö–æ–¥", "exit"):
            print("üëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
            break
        if not user_input:
            continue

        
        if user_input in DETAIL_COMMANDS:
            if last_suggested:
                detail = get_ai_detail(last_suggested)
                print("\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n" + detail)
            else:
                print("-")
            continue  

        
        response, shown_ids, last_suggested = get_ai_response(user_input, shown_ids)
        print("\n–ë–æ—Ç:")
        print(response)


if __name__ == "__main__":
    create_or_update_db()
    console_interface()
